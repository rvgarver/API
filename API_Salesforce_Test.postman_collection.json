{
	"info": {
		"_postman_id": "1aa36fdf-858a-4282-b79a-5f7f4c72b6c2",
		"name": "API_Salesforce_Test",
		"description": "rvgarver@yahoo.com",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Salesforce",
			"item": [
				{
					"name": "Auth",
					"item": [
						{
							"name": "Get Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "92d20732-8a9f-4f9c-a165-a44388a64fe6",
										"exec": [
											"pm.environment.clear()",
											"postman.clearEnvironmentVariable(\"accessToken\");",
											"postman.clearEnvironmentVariable(\"sessionId\");",
											"postman.clearEnvironmentVariable(\"url\");",
											"var jsonObject = xml2Json(responseBody);",
											"console.log(jsonObject['soapenv:Envelope']['soapenv:Body'].loginResponse.result.sessionId);",
											"postman.setEnvironmentVariable(\"accessToken\", \"Bearer \"+jsonObject['soapenv:Envelope']['soapenv:Body'].loginResponse.result.sessionId);",
											"postman.setEnvironmentVariable(\"sessionId\", jsonObject['soapenv:Envelope']['soapenv:Body'].loginResponse.result.sessionId);",
											"postman.setEnvironmentVariable(\"url\", \"\"+jsonObject['soapenv:Envelope']['soapenv:Body'].loginResponse.result.serverUrl.match(/^(.*?)\\.com/)[0]);",
											"postman.setEnvironmentVariable(\"apiVersion\",\"41.0\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "text/xml;charset=UTF-8"
									},
									{
										"key": "SOAPAction",
										"value": "1"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<Envelope xmlns=\"http://schemas.xmlsoap.org/soap/envelope/\"><Header/><Body><login xmlns=\"urn:partner.soap.sforce.com\"><username>rvgarver@yahoo.com</username><password>Qazwsx12345!</password></login></Body></Envelope>"
								},
								"url": {
									"raw": "https://login.salesforce.com/services/Soap/u/41.0",
									"protocol": "https",
									"host": [
										"login",
										"salesforce",
										"com"
									],
									"path": [
										"services",
										"Soap",
										"u",
										"41.0"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "COMPOSITE",
					"item": [
						{
							"name": "Query Account Ids",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "1f84dc76-e370-48be-ab59-a832ce87d5c3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f53d2d9e-c13a-4dbb-ae35-46dce885eea7",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"var arrIds = [];",
											"var arrCompositeDel = [];",
											"",
											"for (var i = 0; i < jsonData.records.length; i++) {",
											"    arrIds.push(jsonData.records[i].Id);",
											"}",
											"",
											"function makeName() {",
											"    var text = \"\";",
											"    var possible = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";",
											"    for (var i = 0; i < 12; i++)",
											"        text += possible.charAt(Math.floor(Math.random() * possible.length));",
											"    return text;",
											"}",
											"",
											"for (var i = 0; i < arrIds.length; i++) {",
											"    arrCompositeDel.push(\"{\\\"method\\\":\\\"DELETE\\\"\\,\\\"url\\\":\\\"/services/data/v41.0/sobjects/Account/\" + arrIds[i] + \"\\\",\\\"referenceId\\\":\\\"\" + makeName() + \"\\\"}\");",
											"}",
											"postman.setEnvironmentVariable(\"arrCompositeDel\", arrCompositeDel);",
											"",
											"console.log(\"arrCompositeDel: \"+arrCompositeDel)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{sessionId}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{url}}/services/data/v{{apiVersion}}/query?q=SELECT+Id+from+Account",
									"host": [
										"{{url}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"query"
									],
									"query": [
										{
											"key": "q",
											"value": "SELECT+Id+from+Account"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Account",
					"item": [
						{
							"name": "getRequiredFieldNames",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b446e1e5-d6da-4ff9-a38d-597b603ca333",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"var editLayoutSections = jsonData.layouts[0].editLayoutSections;",
											"var sObjectRequiredFieldsNameArray = [];",
											"",
											"for (var i = 0; i < editLayoutSections.length; i++) {",
											"    var layoutRows = editLayoutSections[i].layoutRows;",
											"    for (var j = 0; j < layoutRows.length; j++) {",
											"",
											"        var layoutItems = layoutRows[j].layoutItems",
											"        for (var a = 0; a < layoutItems.length; a++) {",
											"",
											"            if (layoutItems[a].required === true) {",
											"                sObjectRequiredFieldsNameArray.push(layoutItems[a].layoutComponents[0].value);",
											"            }",
											"",
											"        }",
											"    }",
											"",
											"}",
											"postman.setEnvironmentVariable(\"sObjectRequiredFieldsNameArray\", sObjectRequiredFieldsNameArray);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{sessionId}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/services/data/v{{apiVersion}}/sobjects/Opportunity/describe/layouts",
									"host": [
										"{{url}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"sobjects",
										"Opportunity",
										"describe",
										"layouts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Account",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4d02029c-4df2-4792-bbd5-2e933477f399",
										"exec": [
											"function makeName()",
											"{",
											"    var text = \"Account-\";",
											"    var possible = \"0123456789\";",
											" ",
											"    for( var i=0; i < 5; i++ )",
											"        text += possible.charAt(Math.floor(Math.random() * possible.length));",
											" ",
											"    return text;",
											"}",
											" ",
											"postman.setEnvironmentVariable('isoTime',(new Date()).toISOString());",
											"postman.setEnvironmentVariable('randomName',makeName());",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "22bbd480-0a30-419a-b865-14d6fd755e6d",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"var header = postman.getResponseHeader(\"Content-Type\");",
											"",
											"tests[\"Account should be successfully created \"] = jsonData.success === true;",
											"",
											"tests[\"Status code should be 201\"] = responseCode.code === 201;",
											"",
											"tests[\"Status code name should be 'Created'\"] = responseCode.name.has(\"Created\");",
											"",
											"tests[\"Header should contain 'application/json' value\"] = header === \"application/json;charset=UTF-8\";",
											"",
											"pm.test(\"Body should have 'id','success','errors' string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"id\");",
											"    pm.expect(pm.response.text()).to.include(\"success\");",
											"    pm.expect(pm.response.text()).to.include(\"errors\");",
											"    ",
											"});",
											"",
											"pm.test(\"Response time should be less than 3000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);",
											"});",
											"",
											"postman.setEnvironmentVariable(\"accountId\", \"\"+jsonData.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{sessionId}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Name\" : \"{{randomName}}\"\n  \n}"
								},
								"url": {
									"raw": "{{url}}/services/data/v{{apiVersion}}/sobjects/Account/",
									"host": [
										"{{url}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"sobjects",
										"Account",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit Account",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d1d28319-57b0-4c93-bde8-56ce6c48834e",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "8b5321e0-3e74-4f15-a6fb-01f03c1b30f8",
										"exec": [
											"var header = postman.getResponseHeader(\"Cache-Control\");",
											"",
											"tests[\"Status code should be 204\"] = responseCode.code === 204;",
											"",
											"tests[\"Status code name should be 'No Content'\"] = responseCode.name.has(\"No Content\");",
											"",
											"tests[\"Header should contain 'Cache-Control' value\"] = header === \"no-cache,must-revalidate,max-age=0,no-store,private\";",
											"console.log(header)",
											"",
											"pm.test(\"Response time should be less than 3000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);",
											"});",
											"",
											" "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{sessionId}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Type\": \"Customer - Channel\",\r\n    \"BillingStreet\": \"1301 Hoch Drive\",\r\n    \"BillingCity\": \"Lawrence\",\r\n    \"BillingState\": \"KS\",\r\n    \"BillingPostalCode\": \"66045\",\r\n    \"BillingCountry\": \"USA\",\r\n    \"ShippingStreet\": \"1301 Hoch Drive\",\r\n    \"ShippingCity\": \"Lawrence\",\r\n    \"ShippingState\": \"KS\",\r\n    \"ShippingPostalCode\": \"66045\",\r\n    \"ShippingCountry\": \"USA\",\r\n    \"Phone\": \"(785) 241-6200\",\r\n    \"Fax\": \"(785) 241-6201\",\r\n    \"AccountNumber\": \"CC634267\",\r\n    \"Website\": \"dickenson-consulting.com\",\r\n    \"Sic\": \"6752\",\r\n    \"Industry\": \"Consulting\",\r\n    \"AnnualRevenue\": 50000000,\r\n    \"NumberOfEmployees\": 120,\r\n    \"Ownership\": \"Private\",\r\n    \"CleanStatus\": \"Pending\",\r\n    \"CustomerPriority__c\": \"Low\",\r\n    \"SLA__c\": \"Bronze\",\r\n    \"Active__c\": \"Yes\",\r\n    \"NumberofLocations__c\": 2,\r\n    \"UpsellOpportunity__c\": \"No\",\r\n    \"SLASerialNumber__c\": \"7425\",\r\n    \"SLAExpirationDate__c\": \"2018-10-17\"\r\n}"
								},
								"url": {
									"raw": "{{url}}/services/data/v{{apiVersion}}/sobjects/Account/{{accountId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"sobjects",
										"Account",
										"{{accountId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative Cases Edit Account",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d1d28319-57b0-4c93-bde8-56ce6c48834e",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "65241daf-0fc3-40d5-8372-e77ad8174343",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"var header = postman.getResponseHeader(\"Cache-Control\");",
											"",
											"tests[\"Status code should be 400\"] = responseCode.code === 400;",
											"",
											"tests[\"Status code name should be 'No Content'\"] = responseCode.name.has(\"Bad Request\");",
											"",
											"tests[\"Header should contain 'Cache-Control' value\"] = header === \"no-cache,must-revalidate,max-age=0,no-store,private\";",
											"console.log(header)",
											"",
											"pm.test(\"Response time should be less than 3000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);",
											"});",
											"",
											"pm.test(\"Body should have fields: 'message','errorCode','fields', string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"message\");",
											"    pm.expect(pm.response.text()).to.include(\"errorCode\");",
											"    pm.expect(pm.response.text()).to.include(\"fields\");",
											"    ",
											"});",
											"console.log(jsonData[0].errorCode)",
											" tests[\"Error message should contain 'Unable to create/update fields:'\"] = jsonData[0].message === \"Unable to create/update fields: BillingAddress, PhotoUrl, ShippingAddress. Please check the security settings of this field and verify that it is read/write for your profile or permission set.\";",
											" ",
											" tests[\"Error code should be equal : 'INVALID_FIELD_FOR_INSERT_UPDATE' \"] =jsonData[0].errorCode === \"INVALID_FIELD_FOR_INSERT_UPDATE\";",
											" ",
											" ",
											" "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{sessionId}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Type\": \"Customer - Channel\",\r\n    \"BillingStreet\": \"1301 Hoch Drive\",\r\n    \"BillingCity\": \"Lawrence\",\r\n    \"BillingState\": \"KS\",\r\n    \"BillingPostalCode\": \"66045\",\r\n    \"BillingCountry\": \"USA\",\r\n    \"BillingAddress\": {\r\n        \"city\": \"Lawrence\",\r\n        \"country\": \"USA\",\r\n        \"postalCode\": \"66045\",\r\n        \"state\": \"KS\",\r\n        \"street\": \"1301 Hoch Drive\"\r\n    },\r\n    \"ShippingStreet\": \"1301 Hoch Drive\",\r\n    \"ShippingCity\": \"Lawrence\",\r\n    \"ShippingState\": \"KS\",\r\n    \"ShippingPostalCode\": \"66045\",\r\n    \"ShippingCountry\": \"USA\",\r\n    \"ShippingAddress\": {\r\n        \"city\": \"Lawrence\",\r\n        \"country\": \"USA\",\r\n        \"postalCode\": \"66045\",\r\n        \"state\": \"KS\",\r\n        \"street\": \"1301 Hoch Drive\"\r\n    },\r\n    \"Phone\": \"(785) 241-6200\",\r\n    \"Fax\": \"(785) 241-6201\",\r\n    \"AccountNumber\": \"CC634267\",\r\n    \"Website\": \"dickenson-consulting.com\",\r\n    \"PhotoUrl\": \"/services/images/photo/0011r00001kkHgyAAE\",\r\n    \"Sic\": \"6752\",\r\n    \"Industry\": \"Consulting\",\r\n    \"AnnualRevenue\": 50000000,\r\n    \"NumberOfEmployees\": 120,\r\n    \"Ownership\": \"Private\",\r\n    \"CleanStatus\": \"Pending\",\r\n    \"CustomerPriority__c\": \"Low\",\r\n    \"SLA__c\": \"Bronze\",\r\n    \"Active__c\": \"Yes\",\r\n    \"NumberofLocations__c\": 2,\r\n    \"UpsellOpportunity__c\": \"No\",\r\n    \"SLASerialNumber__c\": \"7425\",\r\n    \"SLAExpirationDate__c\": \"2018-10-17\"\r\n}"
								},
								"url": {
									"raw": "{{url}}/services/data/v{{apiVersion}}/sobjects/Account/{{accountId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"sobjects",
										"Account",
										"{{accountId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Account",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "1f84dc76-e370-48be-ab59-a832ce87d5c3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a5b05613-9db9-4181-9116-d0725e45ccaf",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"var header = postman.getResponseHeader(\"Content-Type\");",
											"var getAccountId = postman.getEnvironmentVariable(\"accountId\");",
											"",
											"tests[\"Account should have expected id \"] = jsonData.Id === getAccountId;",
											"console.log(getAccountId);",
											"",
											"tests[\"Status code should be 200\"] = responseCode.code === 200;",
											"",
											"tests[\"Status code name should be 'Created'\"] = responseCode.name.has(\"OK\");",
											"",
											"tests[\"Header should contain 'application/json' value\"] = header === \"application/json;charset=UTF-8\";",
											"",
											"pm.test(\"Body should have 'id' field\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Id\");",
											"",
											"});",
											"",
											"pm.test(\"Response time should be less than 3000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{sessionId}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{url}}/services/data/v{{apiVersion}}/sobjects/Account/{{accountId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"sobjects",
										"Account",
										"{{accountId}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "QUERY",
					"item": [
						{
							"name": "Query Account Ids",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "1f84dc76-e370-48be-ab59-a832ce87d5c3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c1b6fd19-1c8f-4c2c-9ff6-eab893ec159a",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"var arrIds = [];",
											"",
											"for (var i = 0; i < jsonData.records.length; i++) {",
											"    arrIds.push(jsonData.records[i].Id);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{sessionId}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{url}}/services/data/v{{apiVersion}}/query?q=SELECT+Id+from+Account",
									"host": [
										"{{url}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"query"
									],
									"query": [
										{
											"key": "q",
											"value": "SELECT+Id+from+Account"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Account",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d1d28319-57b0-4c93-bde8-56ce6c48834e",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6f71e032-edb3-4857-bef9-2b628fbe4f3e",
										"exec": [
											"var header = postman.getResponseHeader(\"Cache-Control\");",
											"",
											"tests[\"Status code should be 204\"] = responseCode.code === 204;",
											"",
											"tests[\"Status code name should be 'No Content'\"] = responseCode.name.has(\"No Content\");",
											"",
											"tests[\"Header should contain 'Cache-Control' value\"] = header === \"no-cache,must-revalidate,max-age=0,no-store,private\";",
											"console.log(header)",
											"",
											"pm.test(\"Response time should be less than 3000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{sessionId}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/services/data/v{{apiVersion}}/sobjects/Account/{{accountId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"sobjects",
										"Account",
										"{{accountId}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "ee23777e-25e7-4c24-a9b6-75ac4192ddd1",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "d5cb6ee6-7b46-4253-acc4-c5c6011c0f63",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	]
}